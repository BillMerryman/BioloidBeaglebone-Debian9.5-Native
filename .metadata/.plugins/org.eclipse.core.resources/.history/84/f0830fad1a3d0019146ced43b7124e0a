/** @file pru.c
 *  @brief Functions for initializing, loading, starting, and stopping a PRU.
 *
 *  These are the functions that: initialize the PRU subsystem, load a program
 *  compiled with the PRU C compiler into the program memory of a given PRU,
 *  initiate execution of a program in a given PRU, and terminate execution of
 *  a program in a given PRU.
 *
 *  @author Bill Merryman
 *  @bug No known bugs.
 *
 *  Created on: Sep 8, 2015
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdint.h>
#include <err.h>
#include <errno.h>

#include "pru.h"

void *pruExternalMemoryVirtual;

PRU_INTEROP_DATA *PRUInteropDataVirtual;

typedef struct{
	char *line;
	char **words;
	size_t num_words;
} LINE;

PRU_INTEROP_DATA *getPRUInteropData()
{
	//map /dev/mem here...
	//we'll have to split this into two functions to get
	//the separate memory for both and update the two areas that
	//get references to these memories...
	return PRUInteropDataVirtual;
}

void initializePRU()
{
	configurePRU_0("PRU_0.out");
	configurePRU_1("PRU_1.out");
	startPRU_0();
	startPRU_1();

	sleep(2);
	parseFile();

	stopPRU_0();
	stopPRU_1();
}

void configurePRU_0(const char *pruFirmware)
{
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc1/firmware", O_RDWR);
	write(fd, pruFirmware, strlen(pruFirmware));
	close(fd);
}

void startPRU_0()
{
	char *start = "start";
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc1/state", O_RDWR);
	write(fd, start, strlen(start));
	close(fd);
}

void stopPRU_0()
{
	char *stop = "stop";
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc1/state", O_RDWR);
	write(fd, stop, strlen(stop));
	close(fd);
}

void configurePRU_1(const char *pruFirmware)
{
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc2/firmware", O_RDWR);
	write(fd, pruFirmware, strlen(pruFirmware));
	close(fd);
}

void startPRU_1()
{
	char *start = "start";
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc2/state", O_RDWR);
	write(fd, start, strlen(start));
	close(fd);
}

void stopPRU_1()
{
	char *stop = "stop";
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc2/state", O_RDWR);
	write(fd, stop, strlen(stop));
	close(fd);
}
void parseFile()
{
	FILE *fptr;
	char *tmp=NULL;
	LINE *lines=NULL;
	size_t num_lines = 0;
	size_t len;
	ssize_t nread;

	fptr = fopen("/sys/kernel/debug/remoteproc/remoteproc2/resource_table", "r");
	if(fptr != NULL)
	{
		while((nread=getline(&tmp, &len, fptr)) != -1)
		{
			lines = realloc(lines, ++num_lines * sizeof(LINE));
			lines[num_lines - 1].line = strdup(tmp);
			lines[num_lines - 1].words = NULL;
			lines[num_lines - 1].num_words = 0;
		}

		for(int counter = 0; counter < num_lines; counter++)
		{
			LINE *line = &lines[counter];
			for(char *end=line->line; *end!='\0'; end++)
			{
				while(isspace(*end))end++;
				if(*end=='\0')break;
				char *start=end;
				size_t charactersInWord=0;
				while((!isspace(*end)) && (*end != '\0'))
				{
					charactersInWord++;
					end++;
				}
				line->words=realloc(line->words, ++(line->num_words) * sizeof(char *));
				line->words[line->num_words - 1] = malloc(charactersInWord + 1);
				memcpy(line->words[lines[counter].num_words - 1], start, charactersInWord);
				line->words[lines[counter].num_words - 1][charactersInWord] = '\0';
			}
		}

		for(int counter = 0; counter < num_lines; counter++)
		{
			printf("%s", lines[counter].line);
			for(int wordCounter = 0; wordCounter < lines[counter].num_words; wordCounter++)
			{
				printf("%s ", lines[counter].words[wordCounter]);
				free(lines[counter].words[wordCounter]);
			}
			printf("\n");
			free(lines[counter].words);
			free(lines[counter].line);
		}

		free(lines);
		free(tmp);
	}
	fclose(fptr);
}
//void parseFile()
//{
//	FILE *fptr;
//	char *resourceTable=(char *)malloc(1);
//	char *tmp=NULL;
//	size_t len;
//	ssize_t nread;
//
//	if(resourceTable!=NULL)
//	{
//		*resourceTable='\0';
//	}
//	else
//	{
//		exit(1);
//	}
//
//	fptr = fopen("/sys/kernel/debug/remoteproc/remoteproc2/resource_table", "r");
//	if(fptr != NULL)
//	{
//		while((nread=getline(&tmp, &len, fptr)) !=-1)
//		{
//			resourceTable = realloc(resourceTable, strlen(resourceTable) + len + 1);
//			strcat(resourceTable, tmp);
//		}
//
//
//		char *newline = resourceTable;
//		size_t newlineCount = 0;
//		for(;*newline!='\0';newline++)
//		{
//			if(*newline=='\n') newlineCount++;
//		}
//
//		typedef struct{
//			char **tokens;
//		}line;
//
//		line *lines = malloc(newlineCount * sizeof(line));
//
//
//		free(tmp);
//		free(resourceTable);
//	}
//	fclose(fptr);
//}
