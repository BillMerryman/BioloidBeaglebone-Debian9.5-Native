/** @file pru.c
 *  @brief Functions for initializing, loading, starting, and stopping a PRU.
 *
 *  These are the functions that: initialize the PRU subsystem, load a program
 *  compiled with the PRU C compiler into the program memory of a given PRU,
 *  initiate execution of a program in a given PRU, and terminate execution of
 *  a program in a given PRU.
 *
 *  @author Bill Merryman
 *  @bug No known bugs.
 *
 *  Created on: Sep 8, 2015
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <ctype.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdint.h>
#include <err.h>
#include <errno.h>

#include "pru.h"

void *pruExternalMemoryVirtual;

PRU_INTEROP_DATA *PRUInteropDataVirtual;

PRU_INTEROP_DATA *getPRUInteropData()
{
	//map /dev/mem here...
	//we'll have to split this into two functions to get
	//the separate memory for both and update the two areas that
	//get references to these memories...
	return PRUInteropDataVirtual;
}

void initializePRU()
{
	configurePRU_0("PRU_0.out");
	configurePRU_1("PRU_1.out");
	startPRU_0();
	startPRU_1();

	parseFile();

	stopPRU_0();
	stopPRU_1();
}

void configurePRU_0(const char *pruFirmware)
{
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc1/firmware", O_RDWR);
	write(fd, pruFirmware, strlen(pruFirmware));
	close(fd);
}

void startPRU_0()
{
	char *start = "start";
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc1/state", O_RDWR);
	write(fd, start, strlen(start));
	close(fd);
}

void stopPRU_0()
{
	char *stop = "stop";
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc1/state", O_RDWR);
	write(fd, stop, strlen(stop));
	close(fd);
}

void configurePRU_1(const char *pruFirmware)
{
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc2/firmware", O_RDWR);
	write(fd, pruFirmware, strlen(pruFirmware));
	close(fd);
}

void startPRU_1()
{
	char *start = "start";
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc2/state", O_RDWR);
	write(fd, start, strlen(start));
	close(fd);
}

void stopPRU_1()
{
	char *stop = "stop";
	int fd;

	fd = open("/sys/class/remoteproc/remoteproc2/state", O_RDWR);
	write(fd, stop, strlen(stop));
	close(fd);
}

void parseFile()
{
	FILE *fptr;
	struct stat stats;
	char *line = NULL;
	ssize_t len = 0;
	ssize_t nread;

	fptr = fopen("/sys/kernel/debug/remoteproc/remoteproc2/resource_table", "r");
	if(fptr != NULL)
	{
		printf("opened file.\n");
		fstat(fptr, &stats);
		if(stats.st_size>0)
		{
			printf("stated file.\n");
			char *strFile;
			if((strFile = malloc(stats.st_size+1))!=NULL)
			{
				printf("malloced file.\n");
				fread(strFile, stats.st_size, 1, fptr);
				printf("%s", strFile);
				free(strFile);
			}
		}
	}
	fclose(fptr);
}
